---

- name: 创建{{BIN_DIR}}目录
  file:
    dest={{BIN_DIR}} 
    state=directory mode=0740

- name: 关闭firewalld服务
  systemd:
    name=firewalld
    state=stopped
    enabled=no

- name: 修改iptables FORWARD chain的默认策略设置
  iptables:
    chain=FORWARD
    policy=ACCEPT

- name: 保存iptables规则配置
  command: iptables-save

- name: 复制docker二进制执行文件
  copy:
    src={{DOCKER_DIR}}/{{item}} 
    dest={{BIN_DIR}}/{{item}} 
    mode=0540
  with_items:
  - docker
  - dockerd
  - docker-init
  - docker-proxy
  - docker-runc
  - docker-containerd
  - docker-containerd-ctr
  - docker-containerd-shim

- name: 复制docker completion文件
  copy:
    src={{DOCKER_DIR}}/completion/bash/{{item}} 
    dest=/etc/bash_completion.d/{{item}} 
    mode=0440
  with_items:
  - docker
 
- name: 创建/etc/docker目录
  file:
    dest=/etc/docker
    state=directory

- name: 创建docker-daemon.json.j2文件
  template:
    src=docker-daemon.json.j2
    dest=/etc/docker/daemon.json

- name: 创建docker.service文件
  template:
    src=docker.service.j2
    dest=/etc/systemd/system/docker.service

- name: 重新加载systemd
  command: systemctl daemon-reload

- name: 启动docker
  service: 
    name=docker
    state=restarted
    enabled=yes

- name: 复制kubectl二进制文件
  copy:
    src={{KUBE_CLIENT_DIR}}/kubectl 
    dest={{BIN_DIR}}/kubectl 
    mode=0540

- name: 创建/root/.kube目录
  file:
    dest=/root/.kube
    state=directory
 
- name: 复制kubectl config配置文件
  copy:
    src={{KUBE_CLIENT_CONFIG}}/ 
    dest=/root/.kube/config
    mode=0440

- name: 创建clusterrolebindings kubelet-bootstrap角色绑定
  command: "{{BIN_DIR}}/kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap"
  run_once: true
  delegate_to: "{{groups['kube-node'][0]}}"
  ignore_errors: yes

- name: 复制kubelet,kube-proxy二进制文件
  copy:
    src={{KUBE_SERVER_DIR}}/{{item}} 
    dest={{BIN_DIR}}/{{item}} 
    mode=0540
  with_items:
  - kube-proxy
  - kubelet

- name: 创建kubelet bootstrapping kubeconfig文件(1) 设置集群参数
  shell: "{{BIN_DIR}}/kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/ssl/ca.pem --embed-certs=true --server={{KUBE_APISERVER}} --kubeconfig=bootstrap.kubeconfig"

- name: 创建kubelet bootstrapping kubeconfig文件(2) 设置客户端认证参数
  shell: "{{BIN_DIR}}/kubectl config set-credentials kubelet-bootstrap --token={{BOOTSTRAP_TOKEN}} --kubeconfig=bootstrap.kubeconfig"

- name: 创建kubelet bootstrapping kubeconfig文件(3) 设置上下文参数
  shell: "{{BIN_DIR}}/kubectl config set-context default --cluster=kubernetes --user=kubelet-bootstrap --kubeconfig=bootstrap.kubeconfig" 

- name: 创建kubelet bootstrapping kubeconfig文件(4) 设置默认上下文
  shell: "{{BIN_DIR}}/kubectl config use-context default --kubeconfig=bootstrap.kubeconfig"
 
- name: 复制bootstrap.kubeconfig到/etc/kubernetes
  copy: 
    remote_src=true
    src="{{item}}"
    dest=/etc/kubernetes/{{item}}
  with_items:
  - bootstrap.kubeconfig

- name: 创建/var/lib/kubelet目录
  file:
    dest=/var/lib/kubelet
    state=directory

- name: 创建kubelet.service文件
  template:
    src=kubelet.service.j2
    dest=/etc/systemd/system/kubelet.service

- name: 重新加载systemd
  command: systemctl daemon-reload

- name: 启动kubelet.service
  service:
    name=kubelet
    state=restarted
    enabled=yes

- name: 生成kube-proxy-csr.json证书签名请求
  template:
    src=kube-proxy-csr.json.j2
    dest=./kube-proxy-csr.json

- name: 创建 kube-proxy 证书
  shell: "{{BIN_DIR}}/cfssl gencert -ca=/etc/kubernetes/ssl/ca.pem -ca-key=/etc/kubernetes/ssl/ca-key.pem -config=/etc/kubernetes/ssl/ca-config.json -profile=kubernetes  kube-proxy-csr.json | {{BIN_DIR}}/cfssljson -bare kube-proxy"

- name: 复制kube-proxy证书到/etc/kubernetes/ssl目录
  copy:
    remote_src=true
    src="{{item}}"
    dest=/etc/kubernetes/ssl/{{item}}
  with_items:
  - kube-proxy.pem
  - kube-proxy-key.pem

- name: 创建kube-proxy kubeconfig文件(1) 设置集群参数
  shell: "{{BIN_DIR}}/kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/ssl/ca.pem --embed-certs=true --server={{KUBE_APISERVER}} --kubeconfig=kube-proxy.kubeconfig"

- name: 创建kube-proxy kubeconfig文件(2) 设置客户端认证参数
  shell: "{{BIN_DIR}}/kubectl config set-credentials kube-proxy --client-certificate=/etc/kubernetes/ssl/kube-proxy.pem --client-key=/etc/kubernetes/ssl/kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig"

- name: 创建kube-proxy kubeconfig文件(3) 设置上下文参数
  shell: "{{BIN_DIR}}/kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig"

- name: 创建kube-proxy kubeconfig文件(4) 设置默认上下文
  shell: "{{BIN_DIR}}/kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig"

- name: 复制kube-proxy.kubeconfig到/etc/kubernetes
  copy:
    remote_src=true
    src="{{item}}"
    dest=/etc/kubernetes/
  with_items:
  - kube-proxy.kubeconfig

- name: 创建/var/lib/kube-proxy目录
  file:
    dest=/var/lib/kube-proxy
    state=directory

- name: 创建kube-proxy.service文件
  template:
    src=kube-proxy.service.j2
    dest=/etc/systemd/system/kube-proxy.service

- name: 重新加载systemd
  command: systemctl daemon-reload

- name: 启动kube-proxy.service
  service:
    name=kube-proxy
    state=restarted
    enabled=yes

- name: 清楚临时文件
  file:
    path="{{item}}"
    state=absent
  with_items:
  - bootstrap.kubeconfig
  - kube-proxy.kubeconfig
  - kube-proxy.csr
  - kube-proxy-csr.json
  - kube-proxy.pem
  - kube-proxy-key.pem

